import { z } from "zod";
export declare const ToolSchema: z.ZodObject<{
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    inputSchema: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    name: string;
    inputSchema: Record<string, unknown>;
    description?: string | undefined;
}, {
    name: string;
    inputSchema: Record<string, unknown>;
    description?: string | undefined;
}>;
export declare const ToolsSchema: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    inputSchema: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    name: string;
    inputSchema: Record<string, unknown>;
    description?: string | undefined;
}, {
    name: string;
    inputSchema: Record<string, unknown>;
    description?: string | undefined;
}>, "many">>;
export interface Tool extends z.infer<typeof ToolSchema> {
}
export type Tools = z.infer<typeof ToolsSchema>;
