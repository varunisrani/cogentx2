# An - models.py
# Generated from template: spotify_firecrawl_agent
# Based on request: Create an agent that can control Firecrawl and Spotify.
# Using detected services: Spotify, Firecrawl

from pydantic import BaseModel
import os
from typing import List, Optional, Dict, Any

from dotenv import load_dotenv
from pydantic import BaseModel, ValidationError
import logging
import os
import sys

# firecrawl_agent - models.py
# Generated by merging templates: spotify, firecrawl
# Based on request: Create an agent that can control Firecrawl and Spotify.
# Using services: SPOTIFY, FIRECRAWL

# From SPOTIFY template
class Config(BaseModel):
    """Configuration for the Spotify Agent"""
    MODEL_CHOICE: str = "gpt-4o-mini"
    BASE_URL: str = "https://api.openai.com/v1"
    LLM_API_KEY: str
    SPOTIFY_API_KEY: str

    @classmethod
    def load_from_env(cls) -> 'Config':
        """Load configuration from environment variables with better error handling"""
        load_dotenv()
        
        # Check for required environment variables
        missing_vars = []
        if not os.getenv("LLM_API_KEY"):
            missing_vars.append("LLM_API_KEY")
        if not os.getenv("SPOTIFY_API_KEY"):
            missing_vars.append("SPOTIFY_API_KEY")
            
        if missing_vars:
            logging.error("Missing required environment variables:")
            for var in missing_vars:
                logging.error(f"  - {var}")
            logging.error("\nPlease create a .env file with the following content:")
            logging.error("""
LLM_API_KEY=your_openai_api_key
SPOTIFY_API_KEY=your_spotify_api_key
MODEL_CHOICE=gpt-4o-mini  # optional
BASE_URL=https://api.openai.com/v1  # optional
            """)
            sys.exit(1)
            
        return cls(
            MODEL_CHOICE=os.getenv("MODEL_CHOICE", "gpt-4o-mini"),
            BASE_URL=os.getenv("BASE_URL", "https://api.openai.com/v1"),
            LLM_API_KEY=os.getenv("LLM_API_KEY"),
            SPOTIFY_API_KEY=os.getenv("SPOTIFY_API_KEY")
        )

